/**
* {{&summary}}
* name: {{&methodName}}
* url: {{&methodName}}URL
* method: {{&methodName}}_TYPE
* raw_url: {{&methodName}}_RAW_URL
{{#parameters}}
    {{^isSingleton}} * @param {{&camelCaseName}} - {{&description}}{{/isSingleton}}
{{/parameters}}
*/

{{&name}}: function(parameters = {}) {
    const config = parameters
    let path = '{{&path}}'
    let body
    let queryParameters = {}
    let form = {}

{{#parameters}}
    {{#isQueryParameter}}
        if(parameters['{{&camelCaseName}}'] !== undefined) {
            queryParameters['{{&name}}'] = parameters['{{&camelCaseName}}']
        }
    {{/isQueryParameter}}

    {{#isPathParameter}}
        path = path.replace('{{brackets name}}', `${parameters['{{&camelCaseName}}']}`)
    {{/isPathParameter}}

    {{#isBodyParameter}}
        if(parameters['{{&camelCaseName}}'] !== undefined) {
            body = parameters['{{&camelCaseName}}']
        }
    {{/isBodyParameter}}

    {{#isFormParameter}}
        if(parameters['{{&camelCaseName}}'] !== undefined) {
            form['{{&name}}'] = parameters['{{&camelCaseName}}']
        }
    {{/isFormParameter}}

    {{#required}}
        if(parameters['{{&camelCaseName}}'] === undefined) {
            return Promise.reject(new Error('Missing required {{&paramType}} parameter: {{&camelCaseName}}'))
        }
    {{/required}}

{{/parameters}}

  if(parameters.$queryParameters) {
      Object.keys(parameters.$queryParameters).forEach(function(parameterName){
          queryParameters[parameterName] = parameters.$queryParameters[parameterName]
      });
  }

  return request('{{toLowerCase method}}', options.domain + path, body, queryParameters, form, config)
},
